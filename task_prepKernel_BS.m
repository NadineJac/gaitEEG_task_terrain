function task_prepKernel_BS(PATH, cfg)
% obtain inverse kernel to project data onto cortex
% load file_in from PATHIN and store file_out in PATHOUT. Reports saved as
% reportNames
%
% INPUT
% - PATH:   structure with all paths leading to diff processing steps
% generated in naj_neurCorGait_paths
% - cfg:    structure with all processing variables generated in naj_neurCorGait_config
%
% overview of performed tasks:
% - load dummy data
% - project electrode locations onto scalp
% - calculate head model
% - get identity noise modelling
% - compute inversion kernel
%
% Nadine Jacobsen, University of Oldenburg, May 2022
% v1.0 last changed May-12-2022

% directories
PATHIN = PATH.code; % dummy data
PATHOUT = PATH.source;

run(fullfile(PATH.brainstorm, 'brainstorm.m')) %start brainstorm

% check whether protocol exists
ProtocolName = cfg.BSprotocolName;
iProtocol = bst_get('Protocol', ProtocolName);
if isempty(iProtocol)
    error(['Unknown protocol: ' ProtocolName]);
    % create cfg.BSprotocolName
    % settings here: default anatomy, one channel file per subj
end

% Select the current procotol
gui_brainstorm('SetCurrentProtocol', iProtocol);

% sub ID
ID = 'sub-all'; si=1;
SubjectNames{si} = ID;

% filenames:
% input file
file_in = fullfile(PATH.code, 'dummy_data_BS_headmodel.set');

% start a new report
bst_report('Start', []);
sFiles = [];

% load data
sFiles = bst_process('CallProcess', 'process_import_data_time', sFiles, [], ...
    'subjectname',  SubjectNames{si}, ...
    'condition',    'standBL', ...
    'datafile',     {{file_in},'EEG-EEGLAB'}, ...
    'timewindow',   [], ...
    'split',        0, ...
    'ignoreshort',  0, ...
    'channelalign', 1, ...
    'usectfcomp',   0, ...
    'usessp',       0, ...
    'freq',         [], ...
    'baseline',     []);

% Process: Project electrodes on scalp
bst_process('CallProcess', 'process_channel_project', sFiles, []);

% Process: Snapshot: Sensors/MRI registration
bst_process('CallProcess', 'process_snapshot', sFiles, [], ...
    'target',   1, ...  % Sensors/MRI registration
    'modality', 4, ...  % EEG
    'orient',   1, ...  % left
    'comment',  [SubjectNames{si},': EEG/MRI Registration']);

% Process: Compute covariance (noise or data) --> identity matrix
sFiles = bst_process('CallProcess', 'process_noisecov', sFiles, [], ...
    'baseline',       [], ...
    'datatimewindow', [], ...
    'sensortypes',    'EEG', ...
    'target',         1, ...  % Noise covariance     (covariance over baseline time window)
    'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
    'identity',       1, ...  % use identity matrix
    'copycond',       1, ...
    'copysubj',       0, ...
    'copymatch',      0, ...
    'replacefile',    1);  % Replace

sFiles = bst_process('CallProcess', 'process_headmodel', sFiles, [], ...
    'Comment',     '', ...
    'sourcespace', 1, ...  % Cortex surface
    'volumegrid',  [], ...
    'meg',         2, ...  % Single sphere
    'eeg',         3, ...  % OpenMEEG BEM
    'ecog',        2, ...  % OpenMEEG BEM
    'seeg',        2, ...  % OpenMEEG BEM
    'openmeeg',    struct(...
    'BemFiles',     {{}}, ...
    'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
    'BemCond',      [1, 0.0125, 1], ...
    'BemSelect',    [1, 1, 1], ...
    'isAdjoint',    0, ...
    'isAdaptative', 1, ...
    'isSplit',      0, ...
    'SplitLength',  4000));

% Get head model file
sHeadModel = bst_get('HeadModelForStudy', sFiles(1).iStudy);

% process: Compute sources (2018)
sFiles = bst_process('CallProcess', 'process_inverse_2018', sFiles, [], ...
    'output',  1, ...  % Kernel only: shared
    'inverse', struct(...
    'Comment',        'dSPM-unscaled: EEG', ...
    'InverseMethod',  'minnorm', ...
    'InverseMeasure', 'dspm2018', ...
    'SourceOrient',   {{'fixed'}}, ...
    'Loose',          0.2, ...
    'UseDepth',       1, ...
    'WeightExp',      0.5, ...
    'WeightLimit',    10, ...
    'NoiseMethod',    'reg', ...
    'NoiseReg',       0.1, ...
    'SnrMethod',      'fixed', ...
    'SnrRms',         1e-06, ...
    'SnrFixed',       3, ...
    'ComputeKernel',  1, ...
    'DataTypes',      {{'EEG'}}));
end %function